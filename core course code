from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import numpy as np
data = pd.read_csv(r'C:\Users\prave\OneDrive\Documents\lung_cancer.csv')
data.columns = data.columns.str.strip().str.replace(' ', '_')
features = [
 'GENDER', 'AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY', 'PEER_PRESSURE',
 'CHRONIC_DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING', 'ALCOHOL_CONSUMING',
 'COUGHING', 'SHORTNESS_OF_BREATH', 'SWALLOWING_DIFFICULTY', 'CHEST_PAIN'
]
target = 'LUNG_CANCER'
X = data[features]
y = data[target]
label_encoders = {}
for column in X.columns:
 if X[column].dtype == 'object':
 le = LabelEncoder()
 X.loc[:, column] = le.fit_transform(X[column])
 label_encoders[column] = le
if y.dtype == 'object':
 target_le = LabelEncoder()
 y = target_le.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
sm = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = sm.fit_resample(X_train, y_train)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_resampled)
X_test_scaled = scaler.transform(X_test)
xgb_model = XGBClassifier(scale_pos_weight=len(y_train_resampled) / sum(y_train_resampled), 
eval_metric='mlogloss',
 random_state=42)
xgb_model.fit(X_train_scaled, y_train_resampled)
y_pred_xgb = xgb_model.predict(X_test_scaled)
print("XGBoost - Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_xgb))
print("XGBoost - Classification Report:")
print(classification_report(y_test, y_pred_xgb))
def get_input_and_predict():
 user_input = []
 for feature in features:
 value = input(f"Enter {feature}: ")
 if feature in label_encoders:
 value = label_encoders[feature].transform([value])[0]
 user_input.append(float(value))
 user_input_df = pd.DataFrame([user_input], columns=features)
 user_input_scaled = scaler.transform(user_input_df)
 prediction = xgb_model.predict(user_input_scaled)
 result = target_le.inverse_transform(prediction)[0]
 print(f"Predicted result: {result}")
get_input_and_predict()
